---
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";
import { marked } from "marked";
import { parse } from "node-html-parser";

/* ---------- 1. 拉取远端评论 ---------- */
const api = "https://github-api.zhzsx.cn/api/comments";
let moments: any[] = [];

try {
  const res = await fetch(api);
  if (!res.ok) throw new Error("fetch failed");
  const list = await res.json();

  moments = await Promise.all(
    list
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
      .map(async (item) => {
        const body = item.body || "";
        const mdImgs = Array.from(body.matchAll(/!\[[^\]]*\]\(([^)]+)\)/g), (m: RegExpMatchArray) => m[1]);
        const customImgs = Array.from(body.matchAll(/\[img\]([^\[]+)\[\/img\]/g), (m: RegExpMatchArray) => m[1]);
        const images = [...mdImgs, ...customImgs];

        let html = await marked.parse(body);
        const root = parse(html);
        root.querySelectorAll("img").forEach((img) => img.remove());
        html = root.toString();

        return {
          id: item.id,
          content: html,
          date: item.created_at,
          images,
        };
      })
  );
} catch (e) {
  console.error("[memos] 拉取评论失败", e);
}

/* ---------- 2. 时间格式化 ---------- */
function formatTime(dateString: string): string {
  const now = new Date();
  const date = new Date(dateString);
  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));

  if (diffInMinutes < 60) return `${diffInMinutes}${i18n(I18nKey.memosMinutesAgo)}`;
  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}${i18n(I18nKey.memosHoursAgo)}`;

  const Y = date.getFullYear();
  const M = String(date.getMonth() + 1).padStart(2, '0');
  const D = String(date.getDate()).padStart(2, '0');
  const h = String(date.getHours()).padStart(2, '0');
  const m = String(date.getMinutes()).padStart(2, '0');
  return `${Y}-${M}-${D} ${h}:${m}`;
}
---

<MainGridLayout title={i18n(I18nKey.memos)} description="即刻短文">
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32">
    <div class="card-base z-10 px-4 py-4 md:px-6 md:py-5 relative w-full">
      <div class="relative max-w-4xl">
        <!-- 头部 -->
        <div class="moments-header mb-6 relative py-10 md:py-12 bg-cover bg-center text-white overflow-hidden rounded-xl">
          <div class="absolute inset-0 bg-gradient-to-br from-black/50 to-black/30"></div>
          <div class="header-content relative z-10 flex items-end justify-between h-full">
            <div class="header-info text-left">
              <h1 class="moments-title text-xl md:text-2xl lg:text-3xl font-bold mb-1">{i18n(I18nKey.memos)}</h1>
              <p class="moments-subtitle text-sm md:text-base lg:text-lg opacity-90">{i18n(I18nKey.memosSubtitle)}</p>
            </div>
            <div class="header-stats text-right">
              <div class="stat-item text-center inline-block">
                <span class="stat-number text-lg md:text-xl lg:text-2xl font-bold text-[var(--primary)] block">{moments.length}</span>
                <span class="stat-label text-xs md:text-sm lg:text-base opacity-80 block">{i18n(I18nKey.memosCount)}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- 时间线 -->
        <div class="moments-timeline">
          <div class="timeline-list space-y-4">
          {moments.map(moment => (
            <div class="moment-item card-base p-4 md:p-6 lg:p-8 hover:shadow-lg transition-all">
              <div class="moment-content">
                <div class="moment-text text-sm md:text-base lg:text-lg text-90 leading-relaxed mb-3 md:mb-4" set:html={moment.content} />
                {moment.images.length > 0 && (
                  <div class="moment-images grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 md:gap-3 lg:gap-4 mb-3 md:mb-4">
                    {moment.images.map((image: string) => (
                      <div class="image-item inline-block rounded-md overflow-hidden">
                        <img
                          src={image}
                          data-src={image}
                          alt={i18n(I18nKey.memosImage)}
                          class="js-lightbox block max-w-[180px] max-h-[180px] object-contain cursor-pointer hover:scale-105 transition-transform"
                          loading="lazy"
                        />
                      </div>
                    ))}
                  </div>
                )}
              </div>

              <hr class="moment-divider border-t border-[var(--line-divider)] my-3 md:my-4" />

              <div class="moment-footer flex justify-between items-center">
                <div class="moment-time flex items-center gap-1.5 text-75 text-xs md:text-sm lg:text-base">
                  <i class="time-icon text-xs md:text-sm">🕐</i>
                  <time datetime={moment.date}>{formatTime(moment.date)}</time>
                </div>
              </div>
            </div>
          ))}
          </div>
        </div>

        <!-- 底部提示 -->
        <div class="moments-tips text-center mt-6 md:mt-8 lg:mt-10 text-75 text-xs md:text-sm lg:text-base italic">
          {i18n(I18nKey.memosTips)}
        </div>
      </div>
    </div>
  </div>
</MainGridLayout>

<!-- 简易灯箱 -->
<div id="lightbox" class="lightbox hidden">
  <img id="lightbox-img" class="lightbox-img" src="" alt="preview">
</div>

<script>
/* ---------- 灯箱逻辑（无行内调用，无全局函数） ---------- */
const box  = document.getElementById('lightbox');
const img = document.getElementById('lightbox-img') as HTMLImageElement;

/* 1. 事件委托：点击任意图片打开 */
document.querySelectorAll('.moment-images').forEach(g =>
  g.addEventListener('click', e => {
    const target = e.target as Element;
    const el = target.closest('.js-lightbox');
    if (!el) return;
    const src = (el as HTMLElement).dataset.src;
    if (src && img) {
      img.src = src;
      box?.classList.remove('hidden');
    }
  })
);

/* 2. 点击遮罩关闭 */
if (box) {
  box.addEventListener('click', () => box.classList.add('hidden'));
}
</script>

<style>
  /* 头部背景图与遮罩 */
  .moments-header {
    background-image: url('https://img.314926.xyz/images/2025/09/22/20250922193025414.webp');
    background-size: cover;
    background-position: center;
    border-radius: 12px;
    padding: 2.5rem 1rem;
    position: relative;
  }
  .moments-header::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(0,0,0,0.55) 0%, rgba(0,0,0,0.3) 100%);
    z-index: 0;
  }
  .header-content {
    position: relative;
    z-index: 1;
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    height: 100%;
  }
  /* 强制白色文字 */
  .moments-title,
  .moments-subtitle,
  .stat-number,
  .stat-label { color: #fff !important; }

  /* 卡片基础 */
  .card-base {
    background: var(--card-bg);
    border: 1px solid var(--line-divider);
    transition: all 0.3s ease;
  }
  .image-item img { transition: transform .3s ease; }
  .image-item:hover img { transform: scale(1.05); }

  /* ===== 灯箱 ===== */
  .lightbox {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    cursor: zoom-out;
  }
  .lightbox.hidden { display: none; }
  .lightbox-img {
    max-width: 90vw;
    max-height: 90vh;
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0,0,0,.5);
    cursor: default;
  }

  /* 响应式微调 */
  @media (max-width: 640px) {
    .moments-header { padding: 2rem 1rem; }
    .header-content { flex-direction: column; align-items: flex-start; gap: .75rem; }
    .moment-images { grid-template-columns: repeat(2,1fr); }
    .moment-footer { flex-direction: column; align-items: flex-start; gap: .5rem; }
  }
  @media (min-width: 641px) and (max-width: 900px) {
    .moments-header { padding: 2.25rem 1.25rem; }
    .moment-item { padding: 1.5rem; }
    .moment-images { grid-template-columns: repeat(3,1fr); gap: .75rem; max-width: 500px; }
    .moment-text { font-size: 1rem; line-height: 1.7; }
    .moment-footer { margin-top: 1rem; }
  }
  @media (min-width: 901px) {
    .moments-header { padding: 3rem 1.5rem; }
    .moment-item { padding: 2rem; }
    .moment-images { grid-template-columns: repeat(auto-fit,minmax(150px,1fr)); max-width: 600px; gap: 1rem; }
    .moment-text { font-size: 1.1rem; line-height: 1.8; }
  }
  @media (max-width: 480px) {
    .card-base { margin: 0 -.5rem; }
    .moment-item { border-radius: 8px; }
    .moments-header { border-radius: 6px; }
  }
</style>